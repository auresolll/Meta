"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var CloudinaryService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudinaryService = void 0;
const node_stream_1 = require("node:stream");
const common_1 = require("@nestjs/common");
const cloudinary_1 = require("cloudinary");
const sharp_1 = require("sharp");
const cloudinary_module_definition_1 = require("./cloudinary.module-definition");
const cloudinary_constant_1 = require("./cloudinary.constant");
let CloudinaryService = CloudinaryService_1 = class CloudinaryService {
    constructor(options) {
        this.options = options;
        this.logger = new common_1.Logger(CloudinaryService_1.name);
        this.cloudinary = cloudinary_1.v2;
        this.cloudinary.config(Object.assign({}, options));
    }
    uploadFile(file, options, sharpOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                const upload = cloudinary_1.v2.uploader.upload_stream(options, (error, result) => {
                    if (error) {
                        this.logger.error(error);
                        return reject(error);
                    }
                    else {
                        resolve(result);
                    }
                });
                const stream = new node_stream_1.Readable();
                if (sharpOptions && file.mimetype.match(/^image/)) {
                    const options = Object.assign({ width: 800 }, sharpOptions);
                    const shrinkedImage = yield (0, sharp_1.default)(file.buffer)
                        .resize(options)
                        .toBuffer();
                    stream.push(shrinkedImage);
                }
                else {
                    stream.push(file.buffer);
                }
                stream.push(null);
                stream.pipe(upload);
            }));
        });
    }
    createSignedUploadUrl(publicId, resourceType, options) {
        return __awaiter(this, void 0, void 0, function* () {
            options = Object.assign(Object.assign({}, cloudinary_constant_1.defaultCreateSignedUploadUrlOptions), options);
            const url = `https://api.cloudinary.com/v1_1/${this.options.cloud_name}/${resourceType}/upload`;
            const timestamp = Math.floor(Date.now() / 1000).toString();
            const signature = this.cloudinary.utils.api_sign_request({
                timestamp,
                folder: options.folder,
                eager: options.eager,
                public_id: publicId,
            }, this.options.api_secret);
            return {
                url,
                publicId,
                apiKey: this.options.api_key,
                timestamp,
                eager: options.eager,
                folder: options.folder,
                signature,
            };
        });
    }
    get cloudinaryInstance() {
        return this.cloudinary;
    }
};
CloudinaryService = CloudinaryService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, common_1.Inject)(cloudinary_module_definition_1.MODULE_OPTIONS_TOKEN)),
    __metadata("design:paramtypes", [Object])
], CloudinaryService);
exports.CloudinaryService = CloudinaryService;
